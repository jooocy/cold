// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastSignedInAt DateTime
  lastActiveLinkId Int?
  lastActiveLink Link? @relation(fields: [lastActiveLinkId], references: [id])

  nickname  String
  profileImageUrl String?

  email String  @unique
  isEmailVerified Boolean @default(false)
  phoneNumber String?
  isPhoneNumberVerified Boolean @default(false)

  linkUsers LinkUser[]
  oauths UserOAuth[]
  answers Answer[]
  questions Question[]
}

model UserOAuth {
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  provider String
  accessToken String
  refreshToken String
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])

  @@id([userId, provider])
}

model LinkUser {
  linkId Int
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  nickname String
  role String
  profileImageUrl String?

  user User @relation(fields: [userId], references: [id])
  link Link @relation(fields: [linkId], references: [id])

  @@id([linkId, userId])
}

model Link {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  password String?
  description String?
  coverImageUrl String?

  linkUsers LinkUser[]
  lastActiveUsers User[]
  linkCategories LinkCategory[]
  questions Question[]
}

model LinkCategory {
  linkId Int
  categoryId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  link Link @relation(fields: [linkId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([linkId, categoryId])
}

model Category {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  linkCategories LinkCategory[]
}

model Question {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String
  isResolved Boolean @default(false)
  authorId Int?
  author User? @relation(fields: [authorId], references: [id])

  linkId Int
  link Link @relation(fields: [linkId], references: [id])

  answers Answer[]
}

model Answer {
  id    Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String
  questionId Int
  question Question @relation(fields: [questionId], references: [id])

  userId Int
  user User @relation(fields: [userId], references: [id])
}